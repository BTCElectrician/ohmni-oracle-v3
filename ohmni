#!/bin/bash

# Ohmni Oracle v3 - Command Line Interface
# Usage: ohmni process <folder_name>
# Example: ohmni process ElecShuffleTest

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Function to show help
show_help() {
    echo "Ohmni Oracle v3 - Document Processing Tool"
    echo ""
    echo "Usage:"
    echo "  ohmni process <folder_name>     Process documents in a folder"
    echo "  ohmni file <folder/file>        Process a single file within a folder"
    echo "  ohmni help                      Show this help message"
    echo ""
    echo "Examples:"
    echo "  ohmni process ElecShuffleTest   Process ElecShuffleTest folder"
    echo "  ohmni file ElecShuffleTest/Electrical/E0.01-SPECIFICATIONS-Rev.3.pdf"
    echo "  ohmni file MyProject/Mechanical/schedule.pdf"
    echo ""
    echo "The folder should be located in: /Users/collin/Desktop/"
    echo ""
    echo "Available folders on Desktop:"
    if [ -d "/Users/collin/Desktop" ]; then
        ls -1 /Users/collin/Desktop/ | grep -v "^\.$" | grep -v "^\.\.$" | while read folder; do
            if [ -d "/Users/collin/Desktop/$folder" ]; then
                echo "  üìÅ $folder"
            fi
        done
    else
        echo "  (Desktop directory not found)"
    fi
}

# Function to process a folder
process_folder() {
    local folder_name="$1"
    local desktop_path="/Users/collin/Desktop"
    local full_path="$desktop_path/$folder_name"
    
    # Check if folder exists
    if [ ! -d "$full_path" ]; then
        print_error "Folder '$folder_name' not found in Desktop"
        print_info "Available folders:"
        ls -1 "$desktop_path" | grep -v "^\.$" | grep -v "^\.\.$" | while read folder; do
            if [ -d "$desktop_path/$folder" ]; then
                echo "  üìÅ $folder"
            fi
        done
        return 1
    fi
    
    # Check if we're in the right directory (ohmni-oracle-v3)
    if [ ! -f "main.py" ]; then
        print_error "main.py not found. Please run this command from the ohmni-oracle-v3 directory"
        print_info "Current directory: $(pwd)"
        return 1
    fi
    
    # Check if virtual environment is active
    if [ -z "$VIRTUAL_ENV" ]; then
        print_warning "Virtual environment not active. Activating..."
        if [ -f "venv/bin/activate" ]; then
            source venv/bin/activate
            print_success "Virtual environment activated"
        else
            print_error "Virtual environment not found. Run 'make setup' first"
            return 1
        fi
    fi
    
    # Set output folder (same as input with /output suffix)
    local output_path="$full_path/output"
    
    print_info "Processing folder: $folder_name"
    print_info "Input path: $full_path"
    print_info "Output path: $output_path"
    echo ""
    
    # Run the main script
    print_success "Starting Ohmni Oracle v3 processing..."
    python3 main.py "$full_path" "$output_path"
    
    local exit_code=$?
    if [ $exit_code -eq 0 ]; then
        print_success "Processing completed successfully!"
        print_info "Results saved to: $output_path"
    else
        print_error "Processing failed with exit code: $exit_code"
    fi
    
    return $exit_code
}

# Function to process a single file
process_file() {
    local file_path="$1"
    local desktop_path="/Users/collin/Desktop"
    local full_path="$desktop_path/$file_path"
    
    # Check if file exists
    if [ ! -f "$full_path" ]; then
        print_error "File '$file_path' not found in Desktop"
        print_info "Make sure the path is relative to Desktop (e.g., ElecShuffleTest/Electrical/file.pdf)"
        return 1
    fi
    
    # Check if we're in the right directory (ohmni-oracle-v3)
    if [ ! -f "main.py" ]; then
        print_error "main.py not found. Please run this command from the ohmni-oracle-v3 directory"
        print_info "Current directory: $(pwd)"
        return 1
    fi
    
    # Check if virtual environment is active
    if [ -z "$VIRTUAL_ENV" ]; then
        print_warning "Virtual environment not active. Activating..."
        if [ -f "venv/bin/activate" ]; then
            source venv/bin/activate
            print_success "Virtual environment activated"
        else
            print_error "Virtual environment not found. Run 'make setup' first"
            return 1
        fi
    fi
    
    # Extract folder and file info
    local folder_name=$(dirname "$file_path" | cut -d'/' -f1)
    local file_name=$(basename "$file_path")
    local subfolder=$(dirname "$file_path" | cut -d'/' -f2-)
    
    # Create temporary folder structure
    local temp_dir=$(mktemp -d)
    local temp_file_path="$temp_dir/$subfolder/$file_name"
    
    # Create the subfolder structure in temp directory
    mkdir -p "$(dirname "$temp_file_path")"
    
    # Copy the file to temp directory
    cp "$full_path" "$temp_file_path"
    
    # Set output folder (same as original folder with /output suffix)
    local output_path="$desktop_path/$folder_name/output"
    
    print_info "Processing single file: $file_name"
    print_info "From folder: $folder_name/$subfolder"
    print_info "Input path: $full_path"
    print_info "Output path: $output_path"
    echo ""
    
    # Run the main script on temp directory
    print_success "Starting Ohmni Oracle v3 processing..."
    python3 main.py "$temp_dir" "$output_path"
    
    local exit_code=$?
    
    # Clean up temp directory
    rm -rf "$temp_dir"
    
    if [ $exit_code -eq 0 ]; then
        print_success "Processing completed successfully!"
        print_info "Results saved to: $output_path"
    else
        print_error "Processing failed with exit code: $exit_code"
    fi
    
    return $exit_code
}

# Main script logic
case "$1" in
    "process")
        if [ -z "$2" ]; then
            print_error "Please specify a folder name"
            echo ""
            show_help
            exit 1
        fi
        process_folder "$2"
        ;;
    "file")
        if [ -z "$2" ]; then
            print_error "Please specify a file path"
            echo ""
            show_help
            exit 1
        fi
        process_file "$2"
        ;;
    "help"|"--help"|"-h")
        show_help
        ;;
    "")
        print_error "No command specified"
        echo ""
        show_help
        exit 1
        ;;
    *)
        print_error "Unknown command: $1"
        echo ""
        show_help
        exit 1
        ;;
esac
